// Refs - emphasizes that all arguments are passed by reference
//    actually maybe Integer, Real and Boolean will be passed by the value for optimization.
//    but keep in mind that these classes have no mutation methods and it's internal state cannot be mutated even by inheritors, so that for both program behaviour and semantics it does not matter whether they are passed by value or by the reference

class SomeClass is
    var ismarked : Boolean := false

    method mark() : void is
        this.ismarked := true
    end

    method getIsmarked() : Boolean is
        return this.ismarked
    end
end

class Main extends EntryPoint is
    var exit_code : Integer := 0

    method assert(cond : Boolean) : void is
        if cond.not() then
            this.exit_code := 1
        end
    end

    method doSmth(a : SomeClass) : void is
        a.mark()
        this.assert(a.getIsmarked()) // here a.ismarked = true

        a := SomeClass()
        // here a.ismarked = false
        var a_mark : Boolean := a.getIsmarked()
        this.assert(a_mark.not())
    end

    method main(stdin: CharInput, stdout: CharOutput, args: Array[Array[Integer]]) : Integer is
        var a : SomeClass := SomeClass()

        // here a.ismarked = false
        var a_mark : Boolean := a.getIsmarked()
        this.assert(a_mark.not())

        this.doSmth(a)

        this.assert(a_mark.not()) // a_mark is still referencing the same object that was not changed
        this.assert(a.getIsmarked()) // here a.ismarked = true

        return this.exit_code
    end
end
