// Refs - emphasizes that all arguments are passed by reference
//    actually maybe Integer, Real and Boolean will be passed by the value for optimization.
//    but keep in mind that these classes have no mutation methods and cannot be inherited, so that for both program behaviour and semantics it does not matter whether they are passed by value or by the reference

class SomeClass is
    var ismarked : false

    method mark() : SomeClass is
        this.ismarked := true
    end
end

class Refs extends EntryPoint is
    method assert(cond : Boolean): Refs then
        if cond.Not() then
            this.ExitCode := 1
        end
    end

    method DoSmth(a : SomeClass) is
        a.mark()
        this := this.assert(a.ismarked) // here a.ismarked = true

        a := SomeClass()
        // here a.ismarked = false
        var a_mark : a.ismarked
        this := this.assert(a_mark.Not())
    end

    this(stdin: CharInput, stdout: CharOutput, stderr: CharOutput, args: Array[Array[Integer]]) is
        var a : SomeClass()

        // here a.ismarked = false
        var a_mark : a.ismarked
        this := this.assert(a_mark.Not())

        this := this.DoSmth(a)

        this := this.assert(a_mark.Not()) // a_mark is still referencing the same object that was not changed
        this := this.assert(a.ismarked) // here a.ismarked = true
    end
end
